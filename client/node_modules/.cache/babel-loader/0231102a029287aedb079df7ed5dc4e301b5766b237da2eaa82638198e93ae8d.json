{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport axios from 'axios';\nimport { useAuthContext } from './AuthContext';\nexport const useRegister = () => {\n  _s();\n  const [error, setError] = useState('');\n  const [spinner, setSpinner] = useState(false); // Set the initial value of spinner to false\n  const {\n    dispatch\n  } = useAuthContext();\n  const register = async (name, email, password) => {\n    setSpinner(true);\n    setError('');\n    const url = 'http://localhost:3000/user/register';\n    const data = {\n      name: name,\n      email: email,\n      password: password\n    };\n    try {\n      const response = await axios.post(url, data);\n      if (response.status === 200) {\n        // save the user to local storage\n        localStorage.setItem('user', JSON.stringify(response.data));\n        // update the auth context\n        dispatch({\n          type: 'Login',\n          payload: response.data\n        });\n      } else if (response.status === 400) {\n        setSpinner(false);\n        setError(response.data.error);\n      }\n    } catch (error) {\n      setSpinner(false);\n      setError('An error occurred during registration.');\n      console.log(error);\n    }\n  };\n  return {\n    register,\n    spinner,\n    error\n  };\n};\n_s(useRegister, \"w4X2i+/Td/Jj6RQMNPnXO4OUEsA=\", false, function () {\n  return [useAuthContext];\n});","map":{"version":3,"names":["useState","axios","useAuthContext","useRegister","error","setError","spinner","setSpinner","dispatch","register","name","email","password","url","data","response","post","status","localStorage","setItem","JSON","stringify","type","payload","console","log"],"sources":["/Users/doheelee/Desktop/my-blog/client/src/context/AuthContext.js"],"sourcesContent":["import { useState } from 'react'\nimport axios from 'axios'\nimport { useAuthContext } from './AuthContext'\n\nexport const useRegister = () => {\n  const [error, setError] = useState('')\n  const [spinner, setSpinner] = useState(false) // Set the initial value of spinner to false\n  const { dispatch } = useAuthContext()\n\n  const register = async (name, email, password) => {\n    setSpinner(true)\n    setError('')\n\n    const url = 'http://localhost:3000/user/register'\n    const data = {\n      name: name,\n      email: email,\n      password: password,\n    }\n\n    try {\n      const response = await axios.post(url, data)\n\n      if (response.status === 200) {\n        // save the user to local storage\n        localStorage.setItem('user', JSON.stringify(response.data))\n        // update the auth context\n        dispatch({ type: 'Login', payload: response.data })\n      } else if (response.status === 400) {\n        setSpinner(false)\n        setError(response.data.error)\n      }\n    } catch (error) {\n      setSpinner(false)\n      setError('An error occurred during registration.')\n      console.log(error)\n    }\n  }\n\n  return { register, spinner, error }\n}\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,QAAQ,eAAe;AAE9C,OAAO,MAAMC,WAAW,GAAG,MAAM;EAAA;EAC/B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC,EAAC;EAC9C,MAAM;IAAEQ;EAAS,CAAC,GAAGN,cAAc,EAAE;EAErC,MAAMO,QAAQ,GAAG,OAAOC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,KAAK;IAChDL,UAAU,CAAC,IAAI,CAAC;IAChBF,QAAQ,CAAC,EAAE,CAAC;IAEZ,MAAMQ,GAAG,GAAG,qCAAqC;IACjD,MAAMC,IAAI,GAAG;MACXJ,IAAI,EAAEA,IAAI;MACVC,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA;IACZ,CAAC;IAED,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMd,KAAK,CAACe,IAAI,CAACH,GAAG,EAAEC,IAAI,CAAC;MAE5C,IAAIC,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;QAC3B;QACAC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAACD,IAAI,CAAC,CAAC;QAC3D;QACAN,QAAQ,CAAC;UAAEc,IAAI,EAAE,OAAO;UAAEC,OAAO,EAAER,QAAQ,CAACD;QAAK,CAAC,CAAC;MACrD,CAAC,MAAM,IAAIC,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;QAClCV,UAAU,CAAC,KAAK,CAAC;QACjBF,QAAQ,CAACU,QAAQ,CAACD,IAAI,CAACV,KAAK,CAAC;MAC/B;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdG,UAAU,CAAC,KAAK,CAAC;MACjBF,QAAQ,CAAC,wCAAwC,CAAC;MAClDmB,OAAO,CAACC,GAAG,CAACrB,KAAK,CAAC;IACpB;EACF,CAAC;EAED,OAAO;IAAEK,QAAQ;IAAEH,OAAO;IAAEF;EAAM,CAAC;AACrC,CAAC;AAAA,GApCYD,WAAW;EAAA,QAGDD,cAAc;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}